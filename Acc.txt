You’re right — the AccountController has a lot going on. I’ll explain it line‑by‑line (and why) in simple language, then present a slightly simplified & commented version you can paste back if you prefer. After that I’ll tell you the next small step to test login.

Summary: what the controller does

Show a login form (GET Login).
Accept posted credentials (POST Login).
Verify the credentials against the Users table (via your IUserRepository).
If valid, create a ClaimsPrincipal (identity + role) and sign the user in using cookie authentication.
Sign the user out (POST Logout).
Now a walkthrough of the important parts (annotated, plain language)

Constructor

public AccountController(IUserRepository userRepo)
The controller gets an IUserRepository injected (so it can look up users).
PasswordHasher _passwordHasher = new PasswordHasher();
This helper hashes and verifies passwords safely (it uses a secure algorithm). You use it to verify the stored hash rather than storing plain passwords.
GET Login

IActionResult Login(string? returnUrl = null)
Shows the login page. returnUrl allows the app to redirect the user back to the page they originally requested after successful login.
POST Login (core flow)

Check inputs:
if email or password blank → show error message.
Retrieve user:
var user = _userRepo.GetByEmail(email);
If user not found → invalid credentials.
Verify password:
var result = _passwordHasher.VerifyHashedPassword(user, user.PasswordHash, password);
This checks the submitted password against the stored hash (no raw comparison).
If Verify returns Success → password correct.
Create claims and identity:
var claims = new List { new Claim(ClaimTypes.Name, user.Email), new Claim(ClaimTypes.Role, user.Role), ... }
A claim is a small piece of identity information (user name, role). Role claim lets [Authorize(Roles="...")] work.
var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
var principal = new ClaimsPrincipal(identity);
Sign in:
await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);
This creates the auth cookie in the browser. After this, HttpContext.User will reflect the signed-in principal on future requests.
Redirect on success:
If returnUrl is a local URL, redirect there; otherwise go to Home/Index.
POST Logout

await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
This clears the auth cookie and signs the user out.


How to read the comments

Top section: explains why each using is present.
Constructor: shows where dependencies are injected.
GET Login: returns the login page and stores returnUrl for post-back.
POST Login: step-by-step
Validate input
Look up user
Verify password using PasswordHasher (secure check)
Build claims and sign-in with cookie auth
Redirect appropriately
POST Logout: signs out and redirects home